buildscript {
    dependencies {
        classpath gradlePlugins.buildProperties
        classpath gradlePlugins.fabric
        classpath gradlePlugins.kotlin
    }
}

plugins {
    id 'io.gitlab.arturbosch.detekt'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.github.triplet.play'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

buildProperties {
    application {
        file teamPropsFile('application.properties')
    }
    secrets {
        file teamPropsFile('secrets.properties')
    }
    releaseSigningConfig {
        file teamPropsFile('releaseSigningConfig.properties')
    }
}

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId((buildProperties.application['applicationId'] | buildProperties.env['APPLICATION_ID']).string)

        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)

        multiDexEnabled true

        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME

        manifestPlaceholders += [
                fabricApiKey: (buildProperties.secrets['fabricApiKey'] | buildProperties.env['FABRIC_API_KEY']).string
        ]

        resValueProperty 'app_name', (buildProperties.application['applicationName'] | "Squanchy")

        resValueProperty 'api_value_twitter_api_key', (buildProperties.secrets['twitterApiKey'] | buildProperties.env['TWITTER_API_KEY'])
        resValueProperty 'api_value_twitter_secret', (buildProperties.secrets['twitterSecret'] | buildProperties.env['TWITTER_SECRET'])

        resValueProperty 'social_query', (buildProperties.application['socialQuery'] | "#AndroidDev")
        resValueProperty 'deeplink_scheme', (buildProperties.application['deeplinkScheme'] | "squanchy")
    }

    if (isNotRunningOnCI()) {
        signingConfigs {
            config {
                signingConfigProperties buildProperties.releaseSigningConfig
            }
        }

        buildTypes {
            debug {
                minifyEnabled false
            }
            release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.config
            }
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
        }
    }

    lintOptions {
        lintConfig teamPropsFile('static-analysis/lint-config.xml')
        abortOnError true
        warningsAsErrors true
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
    }
}

private static boolean isNotRunningOnCI() {
    System.getenv('CI') == null
}

play {
    jsonFile = teamPropsFile('play-store-keys.json')
}

detekt {
    profile = 'main'

    profile('main') {
        input = "$projectDir/src/main/java"
        config = teamPropsFile('static-analysis/detekt-config.yml')
        filters = '.*test.*,.*/resources/.*,.*/tmp/.*'
        output = "$projectDir/build/reports/detekt"
    }

    idea {
        path = "$rootDir/.idea"
        codeStyleScheme = "$rootDir/.idea/codeStyleSettings.xml"
        inspectionsProfile = "$rootDir/.idea/inspectionProfiles/Squanchy.xml"
        report = "$projectDir/build/reports/detekt-idea"
        mask = "*.kt,"
    }
}

project.afterEvaluate {
    check.dependsOn tasks['detektCheck']
}

dependencies {
    implementation libraries.app.crashlytics
    implementation(libraries.app.findbugsAnnotations) {
        exclude group: 'net.jcip'
        exclude group: 'com.google.code.findbugs'
    }
    implementation(libraries.app.firebase) {
        exclude group: 'com.android.support'
    }
    implementation libraries.app.firebaseAuth
    implementation libraries.app.firebaseConfig
    implementation libraries.app.firebaseDb
    implementation libraries.app.firebaseMessaging
    implementation libraries.app.firebaseStorage
    implementation(libraries.app.firebaseUiStorage) {
        exclude group: 'com.android.support'
        exclude group: 'com.google.firebase'
    }

    annotationProcessor libraries.app.glideCompiler
    kapt libraries.app.glideCompiler
    implementation libraries.app.glide
    implementation libraries.app.glideOkHttp3

    implementation libraries.app.jodaTimeAndroid
    implementation libraries.app.kotlin

    implementation libraries.app.playServicesAuth
    implementation libraries.app.rxJava
    implementation libraries.app.rxAndroid
    implementation libraries.app.supportAppCompat
    implementation libraries.app.supportConstraint
    implementation libraries.app.supportDesign
    implementation libraries.app.timber
    implementation libraries.app.twitterCore
    implementation libraries.app.viewPagerAdapter

    annotationProcessor libraries.app.autoValue
    kapt libraries.app.autoValue
    compileOnly libraries.app.autoValue

    annotationProcessor libraries.app.daggerCompiler
    kapt libraries.app.daggerCompiler
    implementation libraries.app.dagger

    testImplementation libraries.test.fest
    testImplementation libraries.test.jodaTime
    testImplementation libraries.test.jUnit4
    testImplementation libraries.test.mockito
}

apply plugin: 'com.google.gms.google-services'
